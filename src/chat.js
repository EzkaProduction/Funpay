import fetch from './fetch.js';
import { log } from './log.js';
import { parseDOM } from './DOMParser.js';
import { load } from './storage.js';
import { issueGood, getGood, addDeliveredName, searchOrdersByUserName } from './sales.js'
import { getSteamCode } from './email.js';
import { getUserData } from './account.js';
import Delays from './delays.js';
const delays = new Delays();

const config = load('config.json');
const autoRespData = load('data/autoResponse.json');
let appData = load('data/appData.json');

let isAutoRespBusy = false;

function enableAutoResponse(timeout) {
    setInterval(autoResponse, timeout);
    log(`–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –∑–∞–ø—É—â–µ–Ω.`);
}

async function autoResponse() {
    if(isAutoRespBusy) return;
    isAutoRespBusy = true;
    let result = false;

    try {
        const chats = await getChats();
        for(let j = 0; j < chats.length; j++) {
            const chat = chats[j];
    
            // Command logic here
    
            // Commands in file
            for(let i = 0; i < autoRespData.length; i++) {
                if(chat.message == autoRespData[i].command) {
                    log(`–ö–æ–º–∞–Ω–¥–∞: ${autoRespData[i].command}, –æ—Ç–≤–µ—Ç: ${autoRespData[i].response} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chat.userName}`);
                    await sendMessage(chat.node, autoRespData[i].response, true);
                    break;
                }
            }
    
            // Custom commands

            if(chat.message.includes("!—Ç–µ—Å—Ç–∞–≤—Ç–æ–≤—ã–¥–∞—á–∏")) {
                const goodName = chat.message.split(`"`)[1];
                const good = await getGood(goodName);
                    
                if(good) {
                    await issueGood(1664916, goodName);
                } else {
                    await sendMessage(chat.node, `–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏.`, true);
                }
            }

            if(chat.message.toLowerCase() == "!–∫–æ–¥") {
                const orders = await searchOrdersByUserName(chat.userName);
                if(orders.length == 0) {
                    await sendMessage(chat.node, `–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –≤—ã–∑–æ–≤–∞ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.`, true);
                    return result;
                }
                const order = orders[0];
                const good = await getGood(order.name);
                const delivered = good.delivered;
                let alreadyDelivered = false;
            
                for(let i = 0; i < delivered.length; i++) {
                    if(delivered[i].name == order.buyerName && delivered[i].order == order.id) {
                        alreadyDelivered = true;
                        break;
                    }
                }
    
                if(!alreadyDelivered) {
                    //sendMessage(chat.node, `–ü–æ–ª—É—á–∞–µ–º –∫–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.`, true);
                    const codeResult = await getSteamCode(good.email, good.pass, good.server);
                    let code = false;

                    if(codeResult.error != true) {
                        code = codeResult.code;
                    } else {
                        if(codeResult.msg == "no-new-mails") {
                            await sendMessage(chat.node, `–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–æ–≤—ã—Ö –∫–æ–¥–æ–≤ –Ω–µ—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–æ—à–ª–∏ –≤ –Ω—É–∂–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –≤ –Ω—É–∂–Ω–æ–º –ª–∞—É–Ω—á–µ—Ä–µ, –ª–∏–±–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.`, true);
                            return result;
                        }
                    }

                    if(code) {
                        const res = await sendMessage(chat.node, `Code: ${code}`, true);
                        if(res) {
                            await addDeliveredName(order.name, order.buyerName, order.id);
                        }
                    }
                } else {
                    await sendMessage(chat.node, `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –∫–æ–¥. –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ –≤—Ö–æ–¥–æ–º, –Ω–∞–ø–∏—à–∏—Ç–µ –æ–± —ç—Ç–æ–º —Å—é–¥–∞ –≤ —á–∞—Ç. –ü—Ä–æ–¥–∞–≤–µ—Ü –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∂–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.`, true);
                }
                break;
            }
        }
    } catch (err) {
        log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–µ: ${err}`);
    }

    isAutoRespBusy = false;
    return result;
}

async function getChats() {
    let result = [];
    try {
        const url = `${config.api}/chat/`;
        const headers = { 
            "cookie": `golden_key=${config.token}`
        };

        const options = {
            method: 'GET',
            headers: headers
        }

        const resp = await fetch(url, options);
        await delays.sleep();
        const text = await resp.text();

        const doc = parseDOM(text);
        const chats = doc.querySelector(".contact-list").children;

        for(let i = 0; i < chats.length; i++) {
            const chat = chats[i];

            result[i] = {
                userName: chat.querySelector(".media-user-name").innerHTML,
                message: chat.querySelector(".contact-item-message").innerHTML,
                time: chat.querySelector(".contact-item-time").innerHTML,
                node: chat.dataset.id
            };
        }
    } catch (err) {
        log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–æ–≤: ${err}`);
    }
    return result;
}

async function getMessages(senderId) {
    let result = false;
    try {
        const url = `${config.api}/chat/history?node=users-${appData.id}-${senderId}&last_message=1000000000`;
        const headers = { 
            "cookie": `golden_key=${config.token}`,
            "x-requested-with": "XMLHttpRequest"
        };

        const options = {
            method: 'GET',
            headers: headers
        }

        const resp = await fetch(url, options);
        await delays.sleep();
        result = await resp.json();
    } catch (err) {
        log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: ${err}`);
    }
    return result;
}

async function sendMessage(senderId, message, customNode = false) {
    if(!message || message == undefined || !senderId || senderId == undefined) return;

    let result = false;
    let maxRetries = 6;
    let tries = 1;
    let delay = 0;
    let node = "";

    try {
        while(result == false) {
            if(tries > maxRetries) break;

            await getUserData();
            appData = load('data/appData.json');

            const url = `${config.api}/runner/`;
            const headers = {
                "accept": "*/*",
                "cookie": `golden_key=${config.token}; PHPSESSID=${appData.sessid}`,
                "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
                "x-requested-with": "XMLHttpRequest"
            };

            if(!customNode) {
                node = `users-${appData.id}-${senderId}`;
            } else {
                node = senderId;
            }

            let reqMessage = `[ üî•NightBot ]\n${message}`;

            const request = {
                "action": "chat_message",
                "data": {
                    "node": node,
                    "content": reqMessage
                }
            };

            const params = new URLSearchParams();
            params.append('objects', "");
            params.append('request', JSON.stringify(request));
            params.append('csrf_token', appData.csrfToken);

            const options = {
                method: 'POST',
                body: params,
                headers: headers
            };

            const resp = await fetch(url, options, delay);
            await delays.sleep();
            const json = await resp.json();

            if(json.response && json.response.error == null) {
                log(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, node: "${node}", —Å–æ–æ–±—â–µ–Ω–∏–µ: "${reqMessage}"`);
                log(`–ó–∞–ø—Ä–æ—Å:`);
                log(options);
                log(`–û—Ç–≤–µ—Ç:`);
                log(json);
                result = true;
            } else {
                log(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, node: "${node}", —Å–æ–æ–±—â–µ–Ω–∏–µ: "${reqMessage}"`);
                log(`–ó–∞–ø—Ä–æ—Å:`);
                log(options);
                log(`–û—Ç–≤–µ—Ç:`);
                log(json);
                result = false;
            }

            tries++;
            delay += 10000;
        }
    } catch (err) {
        log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${err}`);
    }
    return result;
}

export { getMessages, sendMessage, getChats, enableAutoResponse };